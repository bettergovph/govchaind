// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: govchain/datasets/v1/entry.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Entry defines the Entry message.
type Entry struct {
	Id              uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title           string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IpfsCid         string `protobuf:"bytes,4,opt,name=ipfs_cid,json=ipfsCid,proto3" json:"ipfs_cid,omitempty"`
	MimeType        string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	FileName        string `protobuf:"bytes,6,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileUrl         string `protobuf:"bytes,7,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	FallbackUrl     string `protobuf:"bytes,8,opt,name=fallback_url,json=fallbackUrl,proto3" json:"fallback_url,omitempty"`
	FileSize        string `protobuf:"bytes,9,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	ChecksumSha_256 string `protobuf:"bytes,10,opt,name=checksum_sha_256,json=checksumSha256,proto3" json:"checksum_sha_256,omitempty"`
	Agency          string `protobuf:"bytes,11,opt,name=agency,proto3" json:"agency,omitempty"`
	Category        string `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`
	Submitter       string `protobuf:"bytes,13,opt,name=submitter,proto3" json:"submitter,omitempty"`
	Timestamp       string `protobuf:"bytes,14,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PinCount        string `protobuf:"bytes,15,opt,name=pin_count,json=pinCount,proto3" json:"pin_count,omitempty"`
	Creator         string `protobuf:"bytes,16,opt,name=creator,proto3" json:"creator,omitempty"`
	TxHash          string `protobuf:"bytes,17,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b8d88a5975f3d9, []int{0}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Entry) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Entry) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Entry) GetIpfsCid() string {
	if m != nil {
		return m.IpfsCid
	}
	return ""
}

func (m *Entry) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *Entry) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *Entry) GetFileUrl() string {
	if m != nil {
		return m.FileUrl
	}
	return ""
}

func (m *Entry) GetFallbackUrl() string {
	if m != nil {
		return m.FallbackUrl
	}
	return ""
}

func (m *Entry) GetFileSize() string {
	if m != nil {
		return m.FileSize
	}
	return ""
}

func (m *Entry) GetChecksumSha_256() string {
	if m != nil {
		return m.ChecksumSha_256
	}
	return ""
}

func (m *Entry) GetAgency() string {
	if m != nil {
		return m.Agency
	}
	return ""
}

func (m *Entry) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Entry) GetSubmitter() string {
	if m != nil {
		return m.Submitter
	}
	return ""
}

func (m *Entry) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Entry) GetPinCount() string {
	if m != nil {
		return m.PinCount
	}
	return ""
}

func (m *Entry) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Entry) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func init() {
	proto.RegisterType((*Entry)(nil), "govchain.datasets.v1.Entry")
}

func init() { proto.RegisterFile("govchain/datasets/v1/entry.proto", fileDescriptor_33b8d88a5975f3d9) }

var fileDescriptor_33b8d88a5975f3d9 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0xbd, 0x6e, 0x13, 0x41,
	0x14, 0x85, 0xbd, 0x4e, 0xfc, 0x37, 0x09, 0x26, 0x8c, 0x22, 0xb8, 0x01, 0xb4, 0x32, 0x54, 0xae,
	0x6c, 0x25, 0x51, 0xf2, 0x00, 0x44, 0x48, 0x54, 0x14, 0x09, 0x34, 0x34, 0xab, 0xf1, 0xec, 0xb5,
	0xf7, 0x2a, 0xfb, 0xa7, 0x99, 0x6b, 0xcb, 0xce, 0x53, 0xf0, 0x58, 0x94, 0x29, 0x29, 0x91, 0x5d,
	0xf1, 0x16, 0x68, 0x66, 0xb2, 0x31, 0xe5, 0x39, 0xdf, 0xd1, 0xd1, 0xd5, 0xcc, 0x11, 0xa3, 0x45,
	0xb5, 0xd2, 0x99, 0xa2, 0x72, 0x9a, 0x2a, 0x56, 0x16, 0xd9, 0x4e, 0x57, 0xe7, 0x53, 0x2c, 0xd9,
	0x6c, 0x26, 0xb5, 0xa9, 0xb8, 0x92, 0xa7, 0x4d, 0x62, 0xd2, 0x24, 0x26, 0xab, 0xf3, 0x8f, 0x7f,
	0x0f, 0x44, 0xe7, 0xb3, 0x4b, 0xc9, 0xa1, 0x68, 0x53, 0x0a, 0xd1, 0x28, 0x1a, 0x1f, 0xde, 0xb6,
	0x29, 0x95, 0xa7, 0xa2, 0xc3, 0xc4, 0x39, 0x42, 0x7b, 0x14, 0x8d, 0x07, 0xb7, 0x41, 0xc8, 0x91,
	0x38, 0x4a, 0xd1, 0x6a, 0x43, 0x35, 0x53, 0x55, 0xc2, 0x81, 0x67, 0xff, 0x5b, 0xf2, 0x4c, 0xf4,
	0xa9, 0x9e, 0xdb, 0x44, 0x53, 0x0a, 0x87, 0x1e, 0xf7, 0x9c, 0xbe, 0xa1, 0x54, 0xbe, 0x13, 0x83,
	0x82, 0x0a, 0x4c, 0x78, 0x53, 0x23, 0x74, 0x3c, 0xeb, 0x3b, 0xe3, 0xdb, 0xa6, 0x46, 0x07, 0xe7,
	0x94, 0x63, 0x52, 0xaa, 0x02, 0xa1, 0x1b, 0xa0, 0x33, 0xbe, 0xaa, 0x02, 0x5d, 0xa9, 0x87, 0x4b,
	0x93, 0x43, 0x2f, 0x94, 0x3a, 0xfd, 0xdd, 0xe4, 0xf2, 0x83, 0x38, 0x9e, 0xab, 0x3c, 0x9f, 0x29,
	0x7d, 0xef, 0x71, 0x3f, 0x9c, 0xd4, 0x78, 0x2e, 0xd2, 0x54, 0x5b, 0x7a, 0x40, 0x18, 0xec, 0xab,
	0xef, 0xe8, 0x01, 0xe5, 0x58, 0x9c, 0xe8, 0x0c, 0xf5, 0xbd, 0x5d, 0x16, 0x89, 0xcd, 0x54, 0x72,
	0x71, 0x75, 0x0d, 0xc2, 0x67, 0x86, 0x8d, 0x7f, 0x97, 0xa9, 0x8b, 0xab, 0x6b, 0xf9, 0x5a, 0x74,
	0xd5, 0x02, 0x4b, 0xbd, 0x81, 0x23, 0xcf, 0x9f, 0x94, 0x7c, 0x2b, 0xfa, 0x5a, 0x31, 0x2e, 0x2a,
	0xb3, 0x81, 0xe3, 0xd0, 0xde, 0x68, 0xf9, 0x5e, 0x0c, 0xec, 0x72, 0x56, 0x10, 0x33, 0x1a, 0x78,
	0xe1, 0xe1, 0xde, 0x70, 0x94, 0xa9, 0x40, 0xcb, 0xaa, 0xa8, 0x61, 0x18, 0xe8, 0xb3, 0xe1, 0xce,
	0xae, 0xa9, 0x4c, 0x74, 0xb5, 0x2c, 0x19, 0x5e, 0x86, 0xe2, 0x9a, 0xca, 0x1b, 0xa7, 0x25, 0x88,
	0x9e, 0x36, 0xa8, 0xb8, 0x32, 0x70, 0x12, 0x1e, 0xe4, 0x49, 0xca, 0x37, 0xa2, 0xc7, 0xeb, 0x24,
	0x53, 0x36, 0x83, 0x57, 0xe1, 0x4e, 0x5e, 0x7f, 0x51, 0x36, 0xfb, 0x74, 0xf9, 0x6b, 0x1b, 0x47,
	0x8f, 0xdb, 0x38, 0xfa, 0xb3, 0x8d, 0xa3, 0x9f, 0xbb, 0xb8, 0xf5, 0xb8, 0x8b, 0x5b, 0xbf, 0x77,
	0x71, 0xeb, 0xc7, 0xd9, 0xf3, 0x7a, 0xd6, 0xfb, 0xfd, 0xb8, 0x5f, 0xb2, 0xb3, 0xae, 0x5f, 0xcf,
	0xe5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xc8, 0x0e, 0x0f, 0x61, 0x02, 0x00, 0x00,
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PinCount) > 0 {
		i -= len(m.PinCount)
		copy(dAtA[i:], m.PinCount)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.PinCount)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Agency) > 0 {
		i -= len(m.Agency)
		copy(dAtA[i:], m.Agency)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Agency)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ChecksumSha_256) > 0 {
		i -= len(m.ChecksumSha_256)
		copy(dAtA[i:], m.ChecksumSha_256)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.ChecksumSha_256)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FileSize) > 0 {
		i -= len(m.FileSize)
		copy(dAtA[i:], m.FileSize)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.FileSize)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FallbackUrl) > 0 {
		i -= len(m.FallbackUrl)
		copy(dAtA[i:], m.FallbackUrl)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.FallbackUrl)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FileUrl) > 0 {
		i -= len(m.FileUrl)
		copy(dAtA[i:], m.FileUrl)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.FileUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IpfsCid) > 0 {
		i -= len(m.IpfsCid)
		copy(dAtA[i:], m.IpfsCid)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.IpfsCid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntry(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntry(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntry(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.IpfsCid)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.FileUrl)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.FallbackUrl)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.FileSize)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.ChecksumSha_256)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Agency)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.PinCount)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 2 + l + sovEntry(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 2 + l + sovEntry(uint64(l))
	}
	return n
}

func sovEntry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntry(x uint64) (n int) {
	return sovEntry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FallbackUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumSha_256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChecksumSha_256 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PinCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntry = fmt.Errorf("proto: unexpected end of group")
)
