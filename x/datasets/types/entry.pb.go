// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: govchain/datasets/v1/entry.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EntryStatus int32

const (
	EntryStatus_ENTRY_STATUS_UNSPECIFIED EntryStatus = 0
	EntryStatus_ENTRY_STATUS_PENDING     EntryStatus = 1
	EntryStatus_ENTRY_STATUS_APPROVED    EntryStatus = 2
)

var EntryStatus_name = map[int32]string{
	0: "ENTRY_STATUS_UNSPECIFIED",
	1: "ENTRY_STATUS_PENDING",
	2: "ENTRY_STATUS_APPROVED",
}

var EntryStatus_value = map[string]int32{
	"ENTRY_STATUS_UNSPECIFIED": 0,
	"ENTRY_STATUS_PENDING":     1,
	"ENTRY_STATUS_APPROVED":    2,
}

func (x EntryStatus) String() string {
	return proto.EnumName(EntryStatus_name, int32(x))
}

func (EntryStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33b8d88a5975f3d9, []int{0}
}

// Entry defines the Entry message.
type Entry struct {
	Id                uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title             string      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description       string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IpfsCid           string      `protobuf:"bytes,4,opt,name=ipfs_cid,json=ipfsCid,proto3" json:"ipfs_cid,omitempty"`
	MimeType          string      `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	FileName          string      `protobuf:"bytes,6,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileUrl           string      `protobuf:"bytes,7,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	FallbackUrl       string      `protobuf:"bytes,8,opt,name=fallback_url,json=fallbackUrl,proto3" json:"fallback_url,omitempty"`
	FileSize          string      `protobuf:"bytes,9,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	ChecksumSha_256   string      `protobuf:"bytes,10,opt,name=checksum_sha_256,json=checksumSha256,proto3" json:"checksum_sha_256,omitempty"`
	Agency            string      `protobuf:"bytes,11,opt,name=agency,proto3" json:"agency,omitempty"`
	Category          string      `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`
	Submitter         string      `protobuf:"bytes,13,opt,name=submitter,proto3" json:"submitter,omitempty"`
	Timestamp         string      `protobuf:"bytes,14,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PinCount          string      `protobuf:"bytes,15,opt,name=pin_count,json=pinCount,proto3" json:"pin_count,omitempty"`
	Creator           string      `protobuf:"bytes,16,opt,name=creator,proto3" json:"creator,omitempty"`
	TxHash            string      `protobuf:"bytes,17,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Status            EntryStatus `protobuf:"varint,18,opt,name=status,proto3,enum=govchain.datasets.v1.EntryStatus" json:"status,omitempty"`
	RequiredApprovals uint32      `protobuf:"varint,19,opt,name=required_approvals,json=requiredApprovals,proto3" json:"required_approvals,omitempty"`
	Approvals         []*Approval `protobuf:"bytes,20,rep,name=approvals,proto3" json:"approvals,omitempty"`
	LiabilityContract string      `protobuf:"bytes,21,opt,name=liability_contract,json=liabilityContract,proto3" json:"liability_contract,omitempty"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b8d88a5975f3d9, []int{0}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Entry) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Entry) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Entry) GetIpfsCid() string {
	if m != nil {
		return m.IpfsCid
	}
	return ""
}

func (m *Entry) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *Entry) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *Entry) GetFileUrl() string {
	if m != nil {
		return m.FileUrl
	}
	return ""
}

func (m *Entry) GetFallbackUrl() string {
	if m != nil {
		return m.FallbackUrl
	}
	return ""
}

func (m *Entry) GetFileSize() string {
	if m != nil {
		return m.FileSize
	}
	return ""
}

func (m *Entry) GetChecksumSha_256() string {
	if m != nil {
		return m.ChecksumSha_256
	}
	return ""
}

func (m *Entry) GetAgency() string {
	if m != nil {
		return m.Agency
	}
	return ""
}

func (m *Entry) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Entry) GetSubmitter() string {
	if m != nil {
		return m.Submitter
	}
	return ""
}

func (m *Entry) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Entry) GetPinCount() string {
	if m != nil {
		return m.PinCount
	}
	return ""
}

func (m *Entry) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Entry) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *Entry) GetStatus() EntryStatus {
	if m != nil {
		return m.Status
	}
	return EntryStatus_ENTRY_STATUS_UNSPECIFIED
}

func (m *Entry) GetRequiredApprovals() uint32 {
	if m != nil {
		return m.RequiredApprovals
	}
	return 0
}

func (m *Entry) GetApprovals() []*Approval {
	if m != nil {
		return m.Approvals
	}
	return nil
}

func (m *Entry) GetLiabilityContract() string {
	if m != nil {
		return m.LiabilityContract
	}
	return ""
}

type Approval struct {
	Approver            string `protobuf:"bytes,1,opt,name=approver,proto3" json:"approver,omitempty"`
	AccountabilityScore uint32 `protobuf:"varint,2,opt,name=accountability_score,json=accountabilityScore,proto3" json:"accountability_score,omitempty"`
	EvidenceUri         string `protobuf:"bytes,3,opt,name=evidence_uri,json=evidenceUri,proto3" json:"evidence_uri,omitempty"`
	LiabilitySignature  string `protobuf:"bytes,4,opt,name=liability_signature,json=liabilitySignature,proto3" json:"liability_signature,omitempty"`
	Timestamp           string `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Approval) Reset()         { *m = Approval{} }
func (m *Approval) String() string { return proto.CompactTextString(m) }
func (*Approval) ProtoMessage()    {}
func (*Approval) Descriptor() ([]byte, []int) {
	return fileDescriptor_33b8d88a5975f3d9, []int{1}
}
func (m *Approval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Approval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Approval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Approval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Approval.Merge(m, src)
}
func (m *Approval) XXX_Size() int {
	return m.Size()
}
func (m *Approval) XXX_DiscardUnknown() {
	xxx_messageInfo_Approval.DiscardUnknown(m)
}

var xxx_messageInfo_Approval proto.InternalMessageInfo

func (m *Approval) GetApprover() string {
	if m != nil {
		return m.Approver
	}
	return ""
}

func (m *Approval) GetAccountabilityScore() uint32 {
	if m != nil {
		return m.AccountabilityScore
	}
	return 0
}

func (m *Approval) GetEvidenceUri() string {
	if m != nil {
		return m.EvidenceUri
	}
	return ""
}

func (m *Approval) GetLiabilitySignature() string {
	if m != nil {
		return m.LiabilitySignature
	}
	return ""
}

func (m *Approval) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func init() {
	proto.RegisterEnum("govchain.datasets.v1.EntryStatus", EntryStatus_name, EntryStatus_value)
	proto.RegisterType((*Entry)(nil), "govchain.datasets.v1.Entry")
	proto.RegisterType((*Approval)(nil), "govchain.datasets.v1.Approval")
}

func init() { proto.RegisterFile("govchain/datasets/v1/entry.proto", fileDescriptor_33b8d88a5975f3d9) }

var fileDescriptor_33b8d88a5975f3d9 = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xcb, 0x6e, 0x1a, 0x3d,
	0x1c, 0xc5, 0x19, 0x12, 0x6e, 0x26, 0xe1, 0x23, 0x0e, 0xf9, 0xea, 0xb4, 0x11, 0x22, 0x59, 0xa1,
	0x4a, 0x05, 0x85, 0x28, 0x91, 0x2a, 0x75, 0x93, 0x12, 0xda, 0x66, 0x43, 0xd1, 0x0c, 0x54, 0x6a,
	0x37, 0x53, 0xe3, 0x71, 0xc0, 0xca, 0xdc, 0x6a, 0x1b, 0x14, 0xf2, 0x14, 0x7d, 0xa4, 0x2e, 0x2b,
	0x75, 0x93, 0x65, 0x97, 0x55, 0xf2, 0x22, 0x95, 0x3d, 0x98, 0x09, 0x55, 0x96, 0xe7, 0xfc, 0xfe,
	0x3e, 0xe3, 0x19, 0x9f, 0x31, 0x68, 0x4c, 0xa2, 0x39, 0x99, 0x62, 0x16, 0xb6, 0x3d, 0x2c, 0xb1,
	0xa0, 0x52, 0xb4, 0xe7, 0xc7, 0x6d, 0x1a, 0x4a, 0xbe, 0x68, 0xc5, 0x3c, 0x92, 0x11, 0xac, 0x99,
	0x89, 0x96, 0x99, 0x68, 0xcd, 0x8f, 0x8f, 0x7e, 0xe4, 0x40, 0xae, 0xa7, 0xa6, 0x60, 0x05, 0x64,
	0x99, 0x87, 0xac, 0x86, 0xd5, 0xdc, 0xb4, 0xb3, 0xcc, 0x83, 0x35, 0x90, 0x93, 0x4c, 0xfa, 0x14,
	0x65, 0x1b, 0x56, 0xb3, 0x64, 0x27, 0x02, 0x36, 0x40, 0xd9, 0xa3, 0x82, 0x70, 0x16, 0x4b, 0x16,
	0x85, 0x68, 0x43, 0xb3, 0xc7, 0x16, 0xdc, 0x07, 0x45, 0x16, 0x5f, 0x09, 0x97, 0x30, 0x0f, 0x6d,
	0x6a, 0x5c, 0x50, 0xba, 0xcb, 0x3c, 0xf8, 0x02, 0x94, 0x02, 0x16, 0x50, 0x57, 0x2e, 0x62, 0x8a,
	0x72, 0x9a, 0x15, 0x95, 0x31, 0x5c, 0xc4, 0x54, 0xc1, 0x2b, 0xe6, 0x53, 0x37, 0xc4, 0x01, 0x45,
	0xf9, 0x04, 0x2a, 0xa3, 0x8f, 0x03, 0xaa, 0x42, 0x35, 0x9c, 0x71, 0x1f, 0x15, 0x92, 0x50, 0xa5,
	0x47, 0xdc, 0x87, 0x87, 0x60, 0xeb, 0x0a, 0xfb, 0xfe, 0x18, 0x93, 0x6b, 0x8d, 0x8b, 0xc9, 0x96,
	0x8c, 0xa7, 0x46, 0x4c, 0xb4, 0x60, 0xb7, 0x14, 0x95, 0xd2, 0x68, 0x87, 0xdd, 0x52, 0xd8, 0x04,
	0x55, 0x32, 0xa5, 0xe4, 0x5a, 0xcc, 0x02, 0x57, 0x4c, 0xb1, 0xdb, 0x39, 0x3d, 0x43, 0x40, 0xcf,
	0x54, 0x8c, 0xef, 0x4c, 0x71, 0xe7, 0xf4, 0x0c, 0xfe, 0x0f, 0xf2, 0x78, 0x42, 0x43, 0xb2, 0x40,
	0x65, 0xcd, 0x97, 0x0a, 0x3e, 0x07, 0x45, 0x82, 0x25, 0x9d, 0x44, 0x7c, 0x81, 0xb6, 0x92, 0x74,
	0xa3, 0xe1, 0x01, 0x28, 0x89, 0xd9, 0x38, 0x60, 0x52, 0x52, 0x8e, 0xb6, 0x35, 0x4c, 0x0d, 0x45,
	0x25, 0x0b, 0xa8, 0x90, 0x38, 0x88, 0x51, 0x25, 0xa1, 0x2b, 0x43, 0x6d, 0x3b, 0x66, 0xa1, 0x4b,
	0xa2, 0x59, 0x28, 0xd1, 0x7f, 0x49, 0x70, 0xcc, 0xc2, 0xae, 0xd2, 0x10, 0x81, 0x02, 0xe1, 0x14,
	0xcb, 0x88, 0xa3, 0x6a, 0xf2, 0x41, 0x96, 0x12, 0x3e, 0x03, 0x05, 0x79, 0xe3, 0x4e, 0xb1, 0x98,
	0xa2, 0x9d, 0x64, 0x9f, 0xf2, 0xe6, 0x03, 0x16, 0x53, 0xf8, 0x1a, 0xe4, 0x85, 0xc4, 0x72, 0x26,
	0x10, 0x6c, 0x58, 0xcd, 0x4a, 0xe7, 0xb0, 0xf5, 0x54, 0x25, 0x5a, 0xba, 0x0e, 0x8e, 0x1e, 0xb4,
	0x97, 0x0b, 0xe0, 0x2b, 0x00, 0x39, 0xfd, 0x36, 0x63, 0x9c, 0x7a, 0x2e, 0x8e, 0x63, 0x1e, 0xcd,
	0xb1, 0x2f, 0xd0, 0x6e, 0xc3, 0x6a, 0x6e, 0xdb, 0x3b, 0x86, 0x9c, 0x1b, 0x00, 0xdf, 0x80, 0x52,
	0x3a, 0x55, 0x6b, 0x6c, 0x34, 0xcb, 0x9d, 0xfa, 0xd3, 0x0f, 0x33, 0x6b, 0xec, 0x74, 0x81, 0x7a,
	0x98, 0xcf, 0xf0, 0x98, 0xf9, 0x4c, 0x2e, 0x5c, 0x12, 0x85, 0x92, 0x63, 0x22, 0xd1, 0x9e, 0x7e,
	0x97, 0x9d, 0x15, 0xe9, 0x2e, 0xc1, 0xd1, 0x2f, 0x0b, 0x14, 0x4d, 0x8c, 0x3a, 0x8b, 0x24, 0x88,
	0x72, 0xdd, 0xe5, 0x92, 0xbd, 0xd2, 0xf0, 0x18, 0xd4, 0x30, 0xd1, 0x5f, 0xd3, 0x84, 0x0b, 0x12,
	0xf1, 0xa4, 0xe0, 0xdb, 0xf6, 0xee, 0x3a, 0x73, 0x14, 0x52, 0xe5, 0xa2, 0x73, 0xe6, 0xd1, 0x90,
	0xa8, 0xee, 0x31, 0xd3, 0x77, 0xe3, 0x8d, 0x38, 0x83, 0x6d, 0xb0, 0x9b, 0xee, 0x56, 0xb0, 0x49,
	0x88, 0xe5, 0x8c, 0xd3, 0x65, 0xf5, 0xd3, 0x17, 0x71, 0x0c, 0x59, 0x3f, 0xf4, 0xdc, 0x3f, 0x87,
	0xfe, 0xf2, 0x2b, 0x28, 0x3f, 0x3a, 0x00, 0x78, 0x00, 0x50, 0xaf, 0x3f, 0xb4, 0x3f, 0xbb, 0xce,
	0xf0, 0x7c, 0x38, 0x72, 0xdc, 0x51, 0xdf, 0x19, 0xf4, 0xba, 0x97, 0xef, 0x2e, 0x7b, 0x17, 0xd5,
	0x0c, 0x44, 0xa0, 0xb6, 0x46, 0x07, 0xbd, 0xfe, 0xc5, 0x65, 0xff, 0x7d, 0xd5, 0x82, 0xfb, 0x60,
	0x6f, 0x8d, 0x9c, 0x0f, 0x06, 0xf6, 0xc7, 0x4f, 0xbd, 0x8b, 0x6a, 0xf6, 0xed, 0xc9, 0xcf, 0xfb,
	0xba, 0x75, 0x77, 0x5f, 0xb7, 0xfe, 0xdc, 0xd7, 0xad, 0xef, 0x0f, 0xf5, 0xcc, 0xdd, 0x43, 0x3d,
	0xf3, 0xfb, 0xa1, 0x9e, 0xf9, 0xb2, 0xbf, 0xba, 0x44, 0x6e, 0xd2, 0x6b, 0x44, 0xfd, 0xac, 0x62,
	0x9c, 0xd7, 0x97, 0xc8, 0xc9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x3f, 0x1d, 0x47, 0x68,
	0x04, 0x00, 0x00,
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiabilityContract) > 0 {
		i -= len(m.LiabilityContract)
		copy(dAtA[i:], m.LiabilityContract)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.LiabilityContract)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Approvals) > 0 {
		for iNdEx := len(m.Approvals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Approvals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.RequiredApprovals != 0 {
		i = encodeVarintEntry(dAtA, i, uint64(m.RequiredApprovals))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Status != 0 {
		i = encodeVarintEntry(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PinCount) > 0 {
		i -= len(m.PinCount)
		copy(dAtA[i:], m.PinCount)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.PinCount)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Agency) > 0 {
		i -= len(m.Agency)
		copy(dAtA[i:], m.Agency)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Agency)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ChecksumSha_256) > 0 {
		i -= len(m.ChecksumSha_256)
		copy(dAtA[i:], m.ChecksumSha_256)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.ChecksumSha_256)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FileSize) > 0 {
		i -= len(m.FileSize)
		copy(dAtA[i:], m.FileSize)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.FileSize)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FallbackUrl) > 0 {
		i -= len(m.FallbackUrl)
		copy(dAtA[i:], m.FallbackUrl)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.FallbackUrl)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FileUrl) > 0 {
		i -= len(m.FileUrl)
		copy(dAtA[i:], m.FileUrl)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.FileUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IpfsCid) > 0 {
		i -= len(m.IpfsCid)
		copy(dAtA[i:], m.IpfsCid)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.IpfsCid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntry(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Approval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Approval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Approval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LiabilitySignature) > 0 {
		i -= len(m.LiabilitySignature)
		copy(dAtA[i:], m.LiabilitySignature)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.LiabilitySignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EvidenceUri) > 0 {
		i -= len(m.EvidenceUri)
		copy(dAtA[i:], m.EvidenceUri)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.EvidenceUri)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AccountabilityScore != 0 {
		i = encodeVarintEntry(dAtA, i, uint64(m.AccountabilityScore))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Approver) > 0 {
		i -= len(m.Approver)
		copy(dAtA[i:], m.Approver)
		i = encodeVarintEntry(dAtA, i, uint64(len(m.Approver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntry(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntry(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.IpfsCid)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.FileUrl)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.FallbackUrl)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.FileSize)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.ChecksumSha_256)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Agency)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.PinCount)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 2 + l + sovEntry(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 2 + l + sovEntry(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovEntry(uint64(m.Status))
	}
	if m.RequiredApprovals != 0 {
		n += 2 + sovEntry(uint64(m.RequiredApprovals))
	}
	if len(m.Approvals) > 0 {
		for _, e := range m.Approvals {
			l = e.Size()
			n += 2 + l + sovEntry(uint64(l))
		}
	}
	l = len(m.LiabilityContract)
	if l > 0 {
		n += 2 + l + sovEntry(uint64(l))
	}
	return n
}

func (m *Approval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Approver)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	if m.AccountabilityScore != 0 {
		n += 1 + sovEntry(uint64(m.AccountabilityScore))
	}
	l = len(m.EvidenceUri)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.LiabilitySignature)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovEntry(uint64(l))
	}
	return n
}

func sovEntry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntry(x uint64) (n int) {
	return sovEntry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FallbackUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumSha_256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChecksumSha_256 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PinCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= EntryStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredApprovals", wireType)
			}
			m.RequiredApprovals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredApprovals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approvals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approvals = append(m.Approvals, &Approval{})
			if err := m.Approvals[len(m.Approvals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiabilityContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiabilityContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Approval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Approval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Approval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountabilityScore", wireType)
			}
			m.AccountabilityScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountabilityScore |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvidenceUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiabilitySignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiabilitySignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntry = fmt.Errorf("proto: unexpected end of group")
)
